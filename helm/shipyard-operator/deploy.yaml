apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: shipyard-operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: shipyard-operator
  name: shipyard-operator-controller-manager
  namespace: shipyard-operator-system
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: shipyard-operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/part-of: shipyard-operator
  name: vault
  namespace: shipyard-operator-system
stringData:
  VAULT_ADDR: https://vault.sthings.tiab.ssc.sva.de:8200
  VAULT_NAMESPACE: labul
  VAULT_TOKEN: s.gs3DdHI8D4BMFZzQj3X0X72k
type: Opaque
---
apiVersion: v1
data:
  pve-vm: |
    module "{{ .moduleName }}" {
      vm_count = var.vm_count
      vm_name = var.vm_name
      vm_num_cpus = var.vm_num_cpus
      vm_memory = var.vm_memory
      vm_disk_size = var.vm_disk_size
      vm_template = var.vm_template
      pve_cluster_node = var.pve_cluster_node
      pve_datastore = var.pve_datastore
      pve_folder_path = var.pve_folder_path
      pve_network = var.pve_network
      vm_ssh_user = var.vm_ssh_user
      vm_ssh_password = var.vm_ssh_password
      source = "{{ .moduleSourceUrl }}"
      vm_notes = "PVE-VM BUILD w/ SHIPYARD-OPERATOR FOR STUTTGART-THINGS"
    }

    terraform {
      backend "s3" {
        endpoint = "{{ .backendEndpoint }}"
        key = "{{ .backendKey }}"
        region = "{{ .backendRegion }}"
        bucket = "{{ .backendBucket }}"
        skip_credentials_validation = true
        skip_metadata_api_check = true
        skip_region_validation = true
        force_path_style = true
      }

      required_providers {
        {{ .tfProviderName }} = {
          source = "{{ .tfProviderSource }}"
          version = ">= {{ .tfProviderVersion }}"
        }
      }

      required_version = ">= {{ .tfVersion }}"
    }

    provider "proxmox" {
        pm_api_url      = var.pve_api_url
        pm_user         = var.pve_api_user
        pm_password     = var.pve_api_password
        pm_tls_insecure = var.pve_api_tls_verify
        pm_parallel     = 3
    }

    variable "vm_count" {
      default     = 1
      description = "count of to be build vms"
    }

    variable "vm_name" {
      default = false
      description = "name of to be created vm"
    }

    variable "vm_num_cpus" {
      default     = 8
      description = "count of cpu cores"
    }

    variable "vm_disk_size" {
      default     = "128"
      description = "disk size"
    }

    variable "vm_template" {
      default     = false
      description = "name/path of vm template"
    }

    variable "vm_memory" {
      default     = 8192
      description = "count of ram in mb"
    }

    variable "pve_api_url" {
      default     = false
      description = "url of proxmox api"
    }

    variable "pve_api_user" {
      default     = false
      description = "username of proxmox api user"
    }

    variable "pve_api_password" {
      default     = false
      description = "password of proxmox api user"
    }

    variable "pve_api_tls_verify" {
      default     = true
      description = "proxmox API disable check if cert is valid"
    }

    variable "vm_ssh_user" {
      default         = ""
      description     = "Username of VM"
    }

    variable "vm_ssh_password" {
      default         = ""
      description     = "Password of VM user"
    }

    variable "pve_cluster_node"{
      default         = false
      description     = "Cluster node"
    }

    variable "pve_datastore"{
      default         = false
      description     = "Datastore for the PVE"
    }

    variable "pve_folder_path"{
      default         = false
      description     = "Folder path for the PVE"
    }

    variable "pve_network"{
      default         = false
      description     = "Network for the pve"
    }

    output "{{ .moduleName }}_ip" {
      value = module.{{ .moduleName }}.ip
    }
  vsphere-vm: |
    module "{{ .moduleName }}" {
      vm_count = var.vm_count
      vsphere_vm_name = var.vsphere_vm_name
      vm_num_cpus = var.vm_num_cpus
      vm_memory = var.vm_memory
      vm_disk_size = var.vm_disk_size
      firmware = var.firmware
      vsphere_vm_folder_path = var.vsphere_vm_folder_path
      vsphere_datacenter = var.vsphere_datacenter
      vsphere_datastore = var.vsphere_datastore
      vsphere_resource_pool = var.vsphere_resource_pool
      vsphere_network = var.vsphere_network
      vsphere_vm_template = var.vsphere_vm_template
      vm_ssh_user = var.vm_ssh_user
      vm_ssh_password = var.vm_ssh_password
      bootstrap = var.bootstrap
      source = "{{ .moduleSourceUrl }}"
      annotation = var.annotation
    }

    terraform {
      backend "s3" {
        endpoint = "{{ .backendEndpoint }}"
        key = "{{ .backendKey }}"
        region = "{{ .backendRegion }}"
        bucket = "{{ .backendBucket }}"
        skip_credentials_validation = true
        skip_metadata_api_check = true
        skip_region_validation = true
        force_path_style = true
      }

      required_providers {
        {{ .tfProviderName }} = {
          source = "{{ .tfProviderSource }}"
          version = ">= {{ .tfProviderVersion }}"
        }
      }

      required_version = ">= {{ .tfVersion }}"
    }

    provider "vsphere" {
      user                 = var.vsphere_user
      password             = var.vsphere_password
      vsphere_server       = var.vsphere_server
      allow_unverified_ssl = true
    }

    variable "vm_disk_size" {
      default     = "128"
      description = "disk size"
    }

    variable "vsphere_vm_name" {
      default = false
      description = "name of to be created vm"
    }

    variable "annotation" {
      default     = "VSPHERE-VM BUILD w/ SHIPYARD-OPERATOR FOR STUTTGART-THINGS"
      description = "vcenter annotation/note"
    }

    variable "bootstrap" {
      default     = ["echo STUTTGART-THINGS"]
      description = "possibility to define bootstrap commands"
    }

    variable "firmware" {
      default     = "bios"
      description = "firmware"
    }

    variable "vm_count" {
      default     = 1
      description = "count of to be build vms"
    }

    variable "vm_num_cpus" {
      default     = 8
      description = "count of cpu cores"
    }

    variable "vm_memory" {
      default     = 8192
      description = "count of ram in mb"
    }

    variable "vsphere_server" {
      default     = false
      description = "vsphere server"
    }

    variable "vsphere_user" {
      default     = false
      description = "password of vsphere user"
    }

    variable "vsphere_password" {
      default     = false
      description = "password of vsphere user"
    }

    variable "vm_ssh_user" {
      default     = false
      description = "username of ssh user for vm"
    }

    variable "vm_ssh_password" {
      default     = false
      description = "password of ssh user for vm"
    }

    variable "vsphere_datastore" {
      default     = false
      description = "name of vsphere datastore"
    }

    variable "vsphere_datacenter" {
      default     = false
      description = "name of vsphere datacenter"
    }

    variable "vsphere_resource_pool" {
      default     = false
      description = "name of vsphere resource pool"
    }

    variable "vsphere_network" {
      default     = false
      description = "name of vsphere network"
    }

    variable "vsphere_vm_template" {
      default     = false
      description = "name/path of vsphere vm template"
    }

    variable "vsphere_vm_folder_path" {
      default     = false
      description = "folder path of to be created vm on datacenter"
    }

    output "{{ .moduleName }}_ip" {
      value = module.{{ .moduleName }}.ip
    }
kind: ConfigMap
metadata:
  name: terraform-templates
  namespace: shipyard-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: shipyard-operator
    app.kubernetes.io/instance: metrics-reader
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: shipyard-operator
  name: shipyard-operator-manager-role
rules:
- apiGroups:
  - shipyard.sthings.tiab.ssc.sva.de
  resources:
  - shipyardterraforms
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - shipyard.sthings.tiab.ssc.sva.de
  resources:
  - shipyardterraforms/finalizers
  verbs:
  - update
- apiGroups:
  - shipyard.sthings.tiab.ssc.sva.de
  resources:
  - shipyardterraforms/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: shipyard-operator
    app.kubernetes.io/instance: metrics-reader
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: shipyard-operator
  name: shipyard-operator-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: shipyard-operator
    app.kubernetes.io/instance: metrics-reader
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: shipyard-operator
  name: shipyard-operator-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: shipyard-operator-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: shipyard-operator-manager-role
subjects:
- kind: ServiceAccount
  name: shipyard-operator-controller-manager
  namespace: shipyard-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: shipyard-operator
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: shipyard-operator
  name: shipyard-operator-leader-election-role
  namespace: shipyard-operator-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: shipyard-operator-leader-election-rolebinding
  namespace: shipyard-operator-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: shipyard-operator-leader-election-role
subjects:
- kind: ServiceAccount
  name: shipyard-operator-controller-manager
  namespace: shipyard-operator-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: shipyard-operator
    app.kubernetes.io/instance: controller-manager-metrics-service
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: shipyard-operator
    control-plane: controller-manager
  name: shipyard-operator-controller-manager-metrics-service
  namespace: shipyard-operator-system
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: shipyard-operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: shipyard-operator
    control-plane: controller-manager
  name: shipyard-operator-controller-manager
  namespace: shipyard-operator-system
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/component: manager
        app.kubernetes.io/created-by: shipyard-operator
        app.kubernetes.io/instance: controller-manager
        app.kubernetes.io/name: deployment
        app.kubernetes.io/part-of: shipyard-operator
        control-plane: controller-manager
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
                - ppc64le
                - s390x
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        envFrom:
        - secretRef:
            name: vault
        - configMapRef:
            name: terraform-templates
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
        imagePullPolicy: Always
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            drop:
            - ALL
          privileged: true
          readOnlyRootFilesystem: true
          runAsNonRoot: true
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        env:
        - name: ANSIBLE_GATHERING
          value: explicit
        envFrom:
        - secretRef:
            name: vault
        - configMapRef:
            name: terraform-templates
        image: eu.gcr.io/stuttgart-things/shipyard-operator:23.0420.0815-v0.1.65
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            drop:
            - ALL
          privileged: true
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        volumeMounts:
        - mountPath: /terraform/
          name: terraform-templates
      securityContext:
        runAsNonRoot: true
      serviceAccountName: shipyard-operator-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          name: terraform-templates
        name: terraform-templates
---
